#!/usr/bin/with-contenv bash
#shellcheck shell=bash

APPNAME="$(hostname)/20-webproxy"
echo "[$APPNAME][$(date)] Initial setup -- installing NXINX web service"

# create run directory. This is where the locations.conf file will be located.
mkdir -p /run/nginx/html
cp -n /root/locations.conf.example /run/nginx
cp -n /root/index.html /run/nginx/html
chmod a+rwx /run/nginx /run/nginx/html
chmod a+rw /run/nginx/*
chmod a+rw /run/nginx/html/*

# auto-create the locations.conf file if $AUTOGENERATE is set to yes
if [[ "$AUTOGENERATE" == "ON" ]]
then
    echo "[$APPNAME][$(date)] Auto-generating locations.conf file"
    # back up any existing locations.conf file:
    [[ -f /run/nginx/locations.conf ]] && mv -f /run/nginx/locations.conf "/run/nginx/locations.conf.bkup-$(date +%y%m%d%H%M%S)"

    # keep only the newest 10 backups:
    org=$(shopt -p nullglob)    # save current nullglob setting
    shopt -s nullglob           # set nullglob to avoid ls errors when no backups are present
    # shellcheck disable=SC2010
    ls -tp /run/nginx/locations.conf.bkup-* | grep -v '/$' | tail -n +11 | xargs -d '\n' -r rm --   # remove any backups older than the newest 10
    $org                        # restore the original shopt nullglob setting

    # configure the locations.conf file:
    # first read the REVPROXY and REDIRECT environment variables into an array:
    IFS="," read -ra proxy_array <<< "$(echo $REVPROXY|tr -d '[:blank:]')"
    IFS="," read -ra redir_array <<< "$(echo $REDIRECT|tr -d '[:blank:]')"

    # add the redirects to the locations.conf file:
    for ((i=0; i<${#redir_array[@]}; i++))
    do
        # get the location and destination for this array element:
        location="${redir_array[i]%%|*}"
        destination="${redir_array[i]##*|}"

        if [[ "$location" == "" ]] || [[ "$destination" == "" ]]
        then
            continue;
        fi

        # fix prefixes and suffixes if necessary:
        [[ "${location:0:1}" != "/" ]] && location="/$location"
        # breaks more than it fixes... removed for now
        # [[ "${destination:0:4}" != "http" ]] && destination="http://$destination"
        [[ "${destination:0:2}" == "//" ]] && destination="http:$destination"

        # Now print the location entry:
        printf "location %s {\n" "$location" >> /run/nginx/locations.conf
        printf "    return 301 %s;\n" "$destination"  >> /run/nginx/locations.conf
        printf "}\n\n"  >> /run/nginx/locations.conf

    done

    # now loop through the array and create location elements for each entry:
    for ((i=0; i<${#proxy_array[@]}; i++))
    do
        # get the location and destination for this array element:
        location="${proxy_array[i]%%|*}"
        destination="${proxy_array[i]##*|}"

        if [[ "$location" == "" ]] || [[ "$destination" == "" ]]
        then
            continue;
        fi

        # fix prefixes and suffixes if necessary:
        [[ "${location:0:1}" != "/" ]] && location="/$location"
        [[ "${location: -1}" != "/" ]] && location="$location/"
        [[ "${destination:0:4}" != "http" ]] && destination="http://$destination"
        [[ "${destination:0:2}" == "//" ]] && destination="http:$destination"
        [[ "${destination: -1}" != "/" ]] && destination="$destination/"

        # Now print the location entry:
        printf "location %s {\n" "$location" >> /run/nginx/locations.conf
        printf "    proxy_pass %s;\n" "$destination"  >> /run/nginx/locations.conf

        # Additional line to catch redirects; suggested by @wiedehopf:
        # removed again after discussions
        # printf "    proxy_redirect ~^(/|http://[^/]*/)(.*) %s\$2;\n" "$location" >> /run/nginx/locations.conf

        # close off the location entry:
        printf "}\n\n"  >> /run/nginx/locations.conf
    done

    # Finally add the default index files to this configuration:
    # Add index.php to the list if you are using PHP
    printf "index index.html index.htm index.php index.nginx-debian.html;\n"  >> /run/nginx/locations.conf
    chmod a+r /run/nginx/locations.conf

elif [[ ! -f /run/nginx/locations.conf ]]
then
    # No locations.conf is found, and none is generated either. Complain and stop the container:
    echo "-------------------------------------------------"
    echo "|           STOP ! You must either:             |"
    echo "| set AUTOGENERATE=ON in docker-compose.yml     |"
    echo "| or provide a well-formed locations.conf file  |"
    echo "| Please do so and then restart the container.  |"
    echo "-------------------------------------------------"

    exit 1
    else
    echo "[$APPNAME][$(date)] Using user-provided locations.conf file"
fi

# now enable default:
ln -sf /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default

# set logging to what VERBOSELOG says. Default is off, "ON" means to stdout, "FILE" means to access.log/error.log file in external volume
if [[ "${VERBOSELOG,,}" == "on" ]] || [[ "${VERBOSELOG,,}" == "true" ]]
then
  echo "[$APPNAME][$(date)] Enabled HTTP logging to container logs"
  sed -i 's|\(^\s*access_log \).*|\1/dev/stdout ;|' /etc/nginx/nginx.conf
  sed -i 's|\(^\s*error_log \).*|\1/dev/stdout ;|' /etc/nginx/nginx.conf
elif [[ "${VERBOSELOG,,}" == "file" ]]
then
  echo "[$APPNAME][$(date)] Enabled HTTP logging to files in shared volume"
  sed -i 's|\(^\s*access_log \).*|\1/run/nginx/access.log ;|' /etc/nginx/nginx.conf
  sed -i 's|\(^\s*error_log \).*|\1/run/nginx/error.log ;|' /etc/nginx/nginx.conf
else
  echo "[$APPNAME][$(date)] HTTP logging is disabled"
fi



exit 0
